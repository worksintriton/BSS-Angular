{
  "_args": [
    [
      {
        "raw": "observable",
        "scope": null,
        "escapedName": "observable",
        "name": "observable",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/mohammedimthiyas/Desktop/BSS 2"
    ]
  ],
  "_from": "observable@latest",
  "_id": "observable@2.1.4",
  "_inCache": true,
  "_location": "/observable",
  "_nodeVersion": "2.3.1",
  "_npmUser": {
    "name": "dominictarr",
    "email": "dominic.tarr@gmail.com"
  },
  "_npmVersion": "2.13.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "observable",
    "scope": null,
    "escapedName": "observable",
    "name": "observable",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/observable/-/observable-2.1.4.tgz",
  "_shasum": "a0f6bff42ec1e0a069874a9b0c3d15f4cef43a34",
  "_shrinkwrap": null,
  "_spec": "observable",
  "_where": "/Users/mohammedimthiyas/Desktop/BSS 2",
  "author": {
    "name": "Dominic Tarr",
    "email": "dominic.tarr@gmail.com",
    "url": "http://dominictarr.com"
  },
  "bugs": {
    "url": "https://github.com/dominictarr/observable/issues"
  },
  "dependencies": {},
  "description": "A function as representation of a trackable mutable value.",
  "devDependencies": {
    "hyperscript": "~1.0.1",
    "tape": "~2.1.0"
  },
  "directories": {},
  "dist": {
    "shasum": "a0f6bff42ec1e0a069874a9b0c3d15f4cef43a34",
    "tarball": "https://registry.npmjs.org/observable/-/observable-2.1.4.tgz"
  },
  "gitHead": "5ffb971eceb4e293b3c5b92af70cfe516b7bfe6b",
  "homepage": "https://github.com/dominictarr/observable",
  "license": "MIT",
  "maintainers": [
    {
      "name": "raynos",
      "email": "raynos2@gmail.com"
    },
    {
      "name": "dominictarr",
      "email": "dominic.tarr@gmail.com"
    }
  ],
  "name": "observable",
  "optionalDependencies": {},
  "readme": "# observable\n\nA function as representation of a trackable mutable value.\n\n[![testling badge](https://ci.testling.com/dominictarr/observable.png)](https://ci.testling.com/dominictarr/observable)\n\n\n[Interactive Demo](http://dominictarr.github.com/observable)\n\nIt's basically just a `function` that can be called in 3 ways,\nIf an observable is called with no arguments `f()`, it returns the current value.\nIf it is called with an argument `f(value)`, it set that as the value.\n\n``` js\nvar o = require('observable')\nvar v = o()\n\n//set the value\nv(Math.random())\n\n//get the value\nv()\n```\n\nIf an observable is called with another function, it _calls_ that function with the new value, \nwhenever the value changes.\n\n```\nv(function(v){\n  console.log('Was changed to', v)\n})\n```\n\nAnd to stop being notifed of these changes, call the function that was returned\n\n```\nvar stop = v(function(v){\n  console.log('Was changed to', v)\n})\n// then some time later\nstop()\n```\n\n## value\n\n``` js\nvar o = require('observable')\nvar v = o()\n\nv(0)\n\nsetInterval(function () {\n  v(v() + 1)\n}, 500)\n\nv\n```\n\nHow is this demo updating in real-time like that?\nIt's because `observable` is integrated into \n[hyperscript](https://github.com/dominictarr/hyperscript)!\n\n## input, & transform\n\nobserve a input field, and transform it into different string.\nthis transformation is a one way observable.\n\n``` js\nvar o = require('observable')\nvar h = require('hyperscript')\nvar yourName\n  \nh('div', \n  h('h3', 'hello, what is your name?',\n    yourName = h('input', {placeholder: 'enter name'})\n  ),\n  h('h2', o.transform(o.input(yourName), function (v) {\n    return v ? 'Happy Birthday ' + v.toUpperCase() + ' !!!': ''\n  }), {style: {'font-family': 'Comic Sans MS'}})\n)\n```\n\nOh, wow! wasn't that easy! and we did a lot of things there!\n\n* made hyper text that updated in realtime\n* read from an input as you typed\n* transformed user input\n\nAnd there is many other cool things we can do to!\n\n# not\n\nInvert a boolean `observable`\n\n``` js\nvar o = require('observable')\nvar h = require('hyperscript')\nvar _i, i\nh('div',\n  _i = h('input', {type: 'checkbox'}),\n  'checked:', i = o.input(_i, 'checked', 'change'),\n  ' !checked:', o.not(i)\n)\n```\n\nHmm, I wonder if we could couple two things interms of each other?\n\n``` js\nvar o = require('observable')\nvar h = require('hyperscript')\nvar _i = h('input', {type: 'checkbox'})\nvar _j = h('input', {type: 'checkbox'})\nvar i = o.input(_i, 'checked', 'change')\nvar j = o.input(_j, 'checked', 'change')\n\n//just make i != j & j != i\ni(Math.random() < 0.5)\n\no.bind2(o.not(i), j)\n\nh('div', _i, _j)\n```\n\n## compute\n\nCompute a value from others, like a computed value in SQL.\n\n``` js\nvar o = require('observable')\nvar h = require('hyperscript')\nvar i, j\nh('div', \n  i = h('input', {placeholder: 'first name'}),\n  j = h('input', {placeholder: 'last name'}),\n  h('h1', 'Greetings, ',\n    o.compute([o.input(i), o.input(j)], function (f, l) {\n      return f + ' ' + l + (f && l ? ' !' : '')\n    })\n  )\n)\n```\n\n## hover & focus\n\n``` js\nvar h = require('hyperscript')\nvar o = require('observable')\n\nh('div', \n  strong = h('strong', {\n      contentEditable: true,\n      style:{display: 'inline-block'}\n    }, \n    \"editable thing\"\n  ),\n  h('ul', \n    h('li', 'focus: ', o.focus(strong)), \n    h('li', 'hover: ', o.hover(strong))\n  )\n)\n```\n\n## signal \n\nLike observable except only update listeners when the value actually changes.\n\n``` js\nvar s = require('observable').signal\n```\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/dominictarr/observable.git"
  },
  "scripts": {
    "test": "set -e; for t in test/*.js; do node $t; done"
  },
  "testling": {
    "files": "test/*.js",
    "browsers": [
      "ie/8..latest",
      "firefox/17..latest",
      "firefox/nightly",
      "chrome/22..latest",
      "chrome/canary",
      "opera/12..latest",
      "opera/next",
      "safari/5.1..latest",
      "ipad/6.0..latest",
      "iphone/6.0..latest",
      "android-browser/4.2..latest"
    ]
  },
  "version": "2.1.4"
}
