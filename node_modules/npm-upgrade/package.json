{
  "_args": [
    [
      {
        "raw": "npm-upgrade@https://registry.npmjs.org/npm-upgrade/-/npm-upgrade-1.4.1.tgz",
        "scope": null,
        "escapedName": "npm-upgrade",
        "name": "npm-upgrade",
        "rawSpec": "https://registry.npmjs.org/npm-upgrade/-/npm-upgrade-1.4.1.tgz",
        "spec": "https://registry.npmjs.org/npm-upgrade/-/npm-upgrade-1.4.1.tgz",
        "type": "remote"
      },
      "/Users/mohammedimthiyas/Documents/BSS 2"
    ]
  ],
  "_from": "npm-upgrade@https://registry.npmjs.org/npm-upgrade/-/npm-upgrade-1.4.1.tgz",
  "_id": "npm-upgrade@1.4.1",
  "_inCache": true,
  "_location": "/npm-upgrade",
  "_phantomChildren": {
    "array-union": "1.0.2",
    "color-convert": "1.9.2",
    "escape-string-regexp": "1.0.5",
    "execa": "0.7.0",
    "get-caller-file": "1.0.3",
    "glob": "7.1.2",
    "has-flag": "3.0.0",
    "is-path-cwd": "1.0.0",
    "is-path-in-cwd": "1.0.1",
    "lcid": "1.0.0",
    "mem": "1.1.0",
    "object-assign": "4.1.1",
    "p-map": "1.2.0",
    "path-exists": "3.0.0",
    "pinkie-promise": "2.0.1",
    "require-directory": "2.1.1",
    "require-main-filename": "1.0.1",
    "rimraf": "2.6.2",
    "set-blocking": "2.0.0",
    "wrap-ansi": "2.1.0",
    "xregexp": "4.0.0",
    "y18n": "4.0.0",
    "yargs-parser": "10.1.0"
  },
  "_requested": {
    "raw": "npm-upgrade@https://registry.npmjs.org/npm-upgrade/-/npm-upgrade-1.4.1.tgz",
    "scope": null,
    "escapedName": "npm-upgrade",
    "name": "npm-upgrade",
    "rawSpec": "https://registry.npmjs.org/npm-upgrade/-/npm-upgrade-1.4.1.tgz",
    "spec": "https://registry.npmjs.org/npm-upgrade/-/npm-upgrade-1.4.1.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/npm-upgrade/-/npm-upgrade-1.4.1.tgz",
  "_shasum": "2856e7a2db1a5f5ddc0098e3be0a2d7d24a82da4",
  "_shrinkwrap": null,
  "_spec": "npm-upgrade@https://registry.npmjs.org/npm-upgrade/-/npm-upgrade-1.4.1.tgz",
  "_where": "/Users/mohammedimthiyas/Documents/BSS 2",
  "author": {
    "name": "Yuriy Grunin",
    "email": "grunin.ya@ya.ru"
  },
  "bin": {
    "npm-upgrade": "./lib/bin/cli.js"
  },
  "bugs": {
    "url": "https://github.com/th0r/npm-upgrade/issues"
  },
  "changelog": "https://github.com/th0r/npm-upgrade/blob/master/CHANGELOG.md",
  "dependencies": {
    "babel-runtime": "6.26.0",
    "bluebird": "3.5.1",
    "chalk": "2.4.1",
    "cli-table": "0.3.1",
    "del": "3.0.0",
    "detect-indent": "5.0.0",
    "got": "8.3.2",
    "inquirer": "6.0.0",
    "lodash": "4.17.10",
    "npm": "^3.10.6",
    "npm-check-updates": "2.14.2",
    "opener": "1.4.3",
    "semver": "5.5.0",
    "yargs": "12.0.1"
  },
  "description": "Interactive CLI utility to easily update outdated NPM dependencies",
  "devDependencies": {
    "babel-core": "6.26.3",
    "babel-eslint": "8.2.6",
    "babel-plugin-transform-runtime": "6.23.0",
    "babel-preset-env": "1.7.0",
    "babel-preset-stage-2": "6.24.1",
    "eslint": "4.19.1",
    "eslint-config-th0r": "1.0.1",
    "gulp": "4.0.0",
    "gulp-babel": "7.0.1"
  },
  "directories": {
    "lib": "./lib"
  },
  "engines": {
    "node": ">= 6"
  },
  "files": [
    "lib",
    "src",
    "db"
  ],
  "homepage": "https://github.com/th0r/npm-upgrade",
  "keywords": [
    "npm",
    "update",
    "outdated",
    "dependencies",
    "cli",
    "interactive",
    "automatic",
    "changelog",
    "ignore"
  ],
  "license": "MIT",
  "main": "./lib/bin/cli.js",
  "name": "npm-upgrade",
  "optionalDependencies": {},
  "preferGlobal": true,
  "readme": "# npm-upgrade\nInteractive CLI utility to easily update outdated NPM dependencies with changelogs inspection support.\n\n[![NPM version][npm-image]][npm-url] [![Downloads][downloads-image]][npm-url]\n\n## What is this for?\nIf you are tired of manually upgrading `package.json` every time your package dependencies are getting out of date then this utility is for you.\n\nTake a look at this demo:\n\n![npm-upgrade outdated packages](https://cloud.githubusercontent.com/assets/302213/11168821/08311b90-8bb2-11e5-9a71-5da73682ed44.gif)\n\n## Installation\nFirst, install [Node.js](https://nodejs.org) (at least `v4`).\n\nThen install this utility as global npm-module:\n```sh\nnpm i -g npm-upgrade\n```\n\n## Usage\nThis utility is supposed to be run in the root directory of your Node.js project (that contains `package.json`).\nRun `npm-upgrade --help` to see all available top-level commands:\n```\ncheck [filter]          Check for outdated modules\nignore <command>        Manage ignored modules\nchangelog <moduleName>  Show changelog for a module\n```\nRun `npm-upgrade <command> --help` to see usage help for corresponding command.\n`check` is the default command and can be omitted so running `npm-upgrade [filter]` is the same as `npm-upgrade check [filter]`.\n\n### `check` command\nIt will find all your outdated deps and will ask to updated their versions in `package.json`, one by one.\nFor example, here is what you will see if you use outdated version of `@angular/common` module:\n```\nUpdate \"@angular/common\" in package.json from 2.4.8 to 2.4.10? (Use arrow keys)\n❯ Yes\n  No\n  Show changelog\n  Ignore\n  Finish update process\n```\n* `Yes` will update `@angular/common` version in `package.json` to `2.4.10`, but not immediately (see explanation below)\n* `No` will not update this module version.\n* `Show changelog` will try to find changelog url for the current module and open it in default browser.\n* `Ignore` will add this module to the ignored list (see details in [`Ignoring module`](#ignoring-module) section below).\n* `Finish update process` will ...hm... finish update process and save all the changes to `package.json`.\n\nA note on saving changes to `package.json`: when you choose `Yes` to update some module's version, `package.json` won't be immediately updated. It will be updated only after you will process all the outdated modules and confirm update **or** when you choose `Finish update process`. So if in the middle of the update process you've changed your mind just press `Ctrl+C` and `package.json` will remain untouched.\n\nIf you want to check only some deps, you can use `filter` argument:\n```sh\n# Will check only `babel-core` module:\nnpm-upgrade babel-core\n\n# Will check all the deps with `babel` in the name:\nnpm-upgrade '*babel*'\n\n# Note quotes around `filter`. They are necessary because without them bash may interpret `*` as wildcard character.\n\n# Will check all the deps, excluding any with `babel` in the name:\nnpm-upgrade '!*babel*'\n\n# You can combine including and excluding rules:\nnpm-upgrade '*babel* !babel-transform-* !babel-preset-*'\n```\n\nIf you want to check only a group of deps use these options:\n```\n-p, --production   Check only \"dependencies\"\n-d, --development  Check only \"devDependencies\"\n-o, --optional     Check only \"optionalDependencies\"\n```\n\n#### Ignoring module\nSometimes you just want to ignore newer versions of some dependency for some reason. For example, you use `jquery v2` because of the old IE support and don't want `npm-upgrade` to suggest you updating it to `v3`. Or you use `some-funky-module@6.6.5` and know that the new version `6.6.6` contains a bug that breaks your app.\n\nYou can handle these situations by ignoring such modules. You can do it in two ways: choosing `Ignore` during update process or using `npm ignore add` command.\n\nYou will asked two questions. First is a version range to ignore. It should be a valid [semver](http://semver.org/) version. Here are a few examples:\n* `6.6.6` - will ignore only version `6.6.6`. When the next version after `6.6.6` will be published `npm-upgrade` will suggest to update it. Can be used in `some-funky-module` example above.\n* `>2` - will ignore all versions starting from `3.0.0`. Can be used in `jquery v2` example above.\n* `6.6.x || 6.7.x` - will ignore all `6.6.x` and `6.7.x` versions.\n* `*` - will ignore all new versions.\n\nAnd after that `npm-upgrade` will ask about the ignore reason. The answer is optional but is strongly recommended because it will help to explain your motivation to your сolleagues and to yourself after a few months.\n\nAll the data about ignored modules will be stored in `.npm-upgrade.json` file next to your project's `package.json`.\n\n### `ignore` command\nIt will help you manage ignored modules. See [Ignoring module](#ignoring-module) section for more details.\nIt has the following subcommands:\n```\nnpm-upgrade ignore <command>\n\nCommands:\n  add [module]        Add module to ignored list\n  list                Show the list of ignored modules\n  reset [modules...]  Reset ignored modules\n```\n* `add` - will add a module from your deps to ignored list. You can either provide module name as optional `module` argument or interactively select it from the list of project's deps.\n* `list` - will show the list of currently ignored modules along with their ignored versions and reasons.\n* `reset` - will remove modules from the ignored list. You can either provide module names as `modules` argument (separated by space) or interactively select them from the list of project's deps.\n\n### `changelog` command\n```\nnpm-upgrade changelog <moduleName>\n```\nWill try to find changelog url for provided module and open it in default browser.\n\n## Troubleshooting\n**Wrong changelog shown for _\\<moduleName\\>_ or not shown at all!**\n\nYes, It can happen sometimes. This is because there is no standardized way to specify changelog location for the module, so it tries to guess it, using these rules one by one:\n\n1. Check `db/changelogUrls.json` from `master` branch on GitHub or the local copy if it's unreachable.\n2. Check `changelog` field from module's `package.json`.\n3. Parse module's `repository.url` field and if it's on GitHub, try to request some common changelog files (`CHANGELOG.md`, `History.md` etc.) from `master` branch and if it fails, open `Releases` page.\n\nSo, if it guessed wrong it would be great if you could either [fill an issue](../../issues/new) about this or submit a PR which adds proper changelog URL to `db/changelogUrls.json`. There is a tool in the repository for you to make it as easy as possible:\n```sh\n./tools/addModuleChangelogUrlToDb.js <moduleName> <changelogUrl>\n```\n\n## License\n\n[MIT](LICENSE)\n\n[downloads-image]: https://img.shields.io/npm/dt/npm-upgrade.svg\n[npm-url]: https://www.npmjs.com/package/npm-upgrade\n[npm-image]: https://img.shields.io/npm/v/npm-upgrade.svg\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/th0r/npm-upgrade.git"
  },
  "scripts": {
    "lint": "eslint .",
    "prepare": "gulp build"
  },
  "version": "1.4.1"
}
