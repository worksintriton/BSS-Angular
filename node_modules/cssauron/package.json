{
  "_args": [
    [
      {
        "raw": "cssauron@https://registry.npmjs.org/cssauron/-/cssauron-1.4.0.tgz",
        "scope": null,
        "escapedName": "cssauron",
        "name": "cssauron",
        "rawSpec": "https://registry.npmjs.org/cssauron/-/cssauron-1.4.0.tgz",
        "spec": "https://registry.npmjs.org/cssauron/-/cssauron-1.4.0.tgz",
        "type": "remote"
      },
      "/Users/mohammedimthiyas/Documents/BSS 2"
    ]
  ],
  "_from": "cssauron@https://registry.npmjs.org/cssauron/-/cssauron-1.4.0.tgz",
  "_id": "cssauron@1.4.0",
  "_inCache": true,
  "_location": "/cssauron",
  "_phantomChildren": {},
  "_requested": {
    "raw": "cssauron@https://registry.npmjs.org/cssauron/-/cssauron-1.4.0.tgz",
    "scope": null,
    "escapedName": "cssauron",
    "name": "cssauron",
    "rawSpec": "https://registry.npmjs.org/cssauron/-/cssauron-1.4.0.tgz",
    "spec": "https://registry.npmjs.org/cssauron/-/cssauron-1.4.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/",
    "/codelyzer"
  ],
  "_resolved": "https://registry.npmjs.org/cssauron/-/cssauron-1.4.0.tgz",
  "_shasum": "a6602dff7e04a8306dc0db9a551e92e8b5662ad8",
  "_shrinkwrap": null,
  "_spec": "cssauron@https://registry.npmjs.org/cssauron/-/cssauron-1.4.0.tgz",
  "_where": "/Users/mohammedimthiyas/Documents/BSS 2",
  "author": {
    "name": "Chris Dickinson",
    "email": "chris@neversaw.us"
  },
  "bugs": {
    "url": "https://github.com/chrisdickinson/cssauron/issues"
  },
  "dependencies": {
    "through": "X.X.X"
  },
  "description": "create matching selectors from css for your very own nested object hierarchy",
  "devDependencies": {
    "tape": "~2.0.0"
  },
  "directories": {
    "test": "test"
  },
  "homepage": "https://github.com/chrisdickinson/cssauron#readme",
  "keywords": [
    "css",
    "selector",
    "parser",
    "match"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "cssauron",
  "optionalDependencies": {},
  "readme": "# cssauron\n\nbuild a matching function in CSS for any nested object structure!\n\n```javascript\nvar language = require('cssauron')({\n    tag: 'tagName'\n  , contents: 'innerText'\n  , id: 'id'\n  , class: 'className'\n  , parent: 'parentNode'\n  , children: 'childNodes'\n  , attr: 'getAttribute(attr)'\n})\n\nvar selector = language('body > #header .logo')\n  , element = document.getElementsByClassName('logo')[0]\n\nif(selector(element)) {\n  // element matches selector\n} else {\n  // element does not match selector\n}\n```\n\nIt's easy to use with your favorite nested tree structures!\nDelicious with HTML! Digestable with JSON!\n\n| HTML | JSON | GLSL AST | JS AST (Esprima) |\n|------|------|----------|------------------------|\n| [cssauron-html](http://npm.im/cssauron-html) | [cssauron-json](http://npm.im/cssauron-json) | [cssauron-glsl](http://npm.im/cssauron-glsl) | [cssauron-falafel](http://npm.im/cssauron-falafel) |\n\n\n# API\n\n### require('cssauron')(options) -> selector factory\n\nImport `cssauron` and configure it for the nested object structure you'll\nwant to match against.\n\n#### options\n\n`options` are an object hash of lookup type to string attribute or `function(node)` lookups for queried\nnodes. You only need to provide the configuration necessary for the selectors you're planning on creating.\n(If you're not going to use `#id` lookups, there's no need to provide the `id` lookup in your options.)\n\n* `tag`: Extract tag information from a node for `div` style selectors.\n* `contents`: Extract text information from a node, for `:contains(xxx)` selectors.\n* `id`: Extract id for `#my_sweet_id` selectors.\n* `class`: `.class_name`\n* `parent`: Used to traverse up from the current node, for composite selectors `body #wrapper`, `body > #wrapper`.\n* `children`: Used to traverse from a parent to its children for sibling selectors `div + span`, `a ~ p`.\n* `attr`: Used to extract attribute information, for `[attr=thing]` style selectors.\n\n### selector_factory('some selector') -> match function\n\nCompiles a matching function.\n\n### match(node) -> false | node | [subjects, ...]\n\nReturns false if the provided node does not match the selector. Returns truthy if the provided\nnode *does* match. Exact return value is determined by the selector, based on\nthe [CSS4 subject selector spec](http://dev.w3.org/csswg/selectors4/#subject): if only\na single node is matched, only that node is returned. If multiple subjects are matched,\na deduplicated array of those subjects are returned.\n\nFor example, given the following HTML (and `cssauron-html`):\n\n```html\n<div id=\"gary-busey\">\n    <p>\n        <span class=\"jake-busey\">\n        </span>\n    </p>\n</div>\n```\n\nChecking the following selectors against the `span.jake-busey` element yields:\n\n - `#gary-busey`: `false`, no match.\n - `#gary-busey *`: `span.jake-busey`, a single match.\n - `!#gary-busey *`: `div#gary-busey`, a single match using the `!` subject selector.\n - `#gary-busey *, p span`: `span.jake-busey`, a single match, though both selectors match.\n - `#gary-busey !* !*, !p > !span`: `[p, span.jake-busey]`, two matches.\n\n## Supported pseudoclasses \n\n - `:first-child`\n - `:last-child`\n - `:nth-child`\n - `:empty`\n - `:root`\n - `:contains(text)`\n - `:any(selector, selector, selector)`\n\n## Supported attribute lookups\n\n - `[attr=value]`: Exact match\n - `[attr]`: Attribute exists and is not false-y.\n - `[attr$=value]`: Attribute ends with value\n - `[attr^=value]`: Attribute starts with value\n - `[attr*=value]`: Attribute contains value\n - `[attr~=value]`: Attribute, split by whitespace, contains value.\n - `[attr|=value]`: Attribute, split by `-`, contains value.\n\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/chrisdickinson/cssauron.git"
  },
  "scripts": {
    "test": "node test/index.js"
  },
  "version": "1.4.0"
}
